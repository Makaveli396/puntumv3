# bot.py
import os
import logging
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)

# Importaciones de tus m√≥dulos locales
# CAMBIO CLAVE: Importaciones de sistema_autorizacion.py (sin setup_admin_list)
from sistema_autorizacion import (
    create_auth_tables, is_chat_authorized, authorize_chat,
    auth_required, cmd_solicitar_autorizacion, cmd_aprobar_grupo, cmd_ver_solicitudes,
    cmd_status_auth # Aseg√∫rate de que cmd_status_auth est√© si lo usas en sistema_autorizacion.py
)

# CORRECCI√ìN DE SINTAXIS: Nueva l√≠nea para separar importaciones
from comandos_basicos import (
    cmd_id, cmd_saludar, cmd_rules, cmd_echo, cmd_about,
    cmd_info, cmd_donate, cmd_contacto, cmd_links,
    cmd_github, cmd_version
    # Nota: cmd_start, cmd_help, cmd_config, cmd_stats, cmd_broadcast_message, cmd_ping, cmd_status
    # no est√°n en tu comandos_basicos.py proporcionado.
    # Si los tienes en otro lugar, deber√°s importarlos de all√≠ o definirlos.
    # Aqu√≠ solo importo los que s√≠ estaban en tu comandos_basicos.py.
)

from db import (
    initialize_db, add_user, get_user_by_telegram_id,
    add_chat, get_chat_by_telegram_id, record_message,
    get_top_users, get_top_chats, get_bot_stats,
    update_user_activity, update_chat_activity
)
from utils import (
    load_env, get_random_meme_url,
    get_crypto_price, fetch_weather, get_exchange_rate,
    get_youtube_video_info, get_joke, get_random_fact
)
from juegos import (
    cmd_adivinapelicula, cmd_emojipelicula, handle_game_message,
    handle_trivia_callback
)

from generador_trivia import generar_pregunta

# Configuraci√≥n de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Comandos Administrativos (auth_required) ---
# Si estas funciones no est√°n en comandos_basicos.py o sistema_autorizacion.py,
# deber√°s definirlas o importarlas de donde est√©n.
# Por simplicidad, asumo que las funciones importadas son las que est√°n definidas.

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Inicia el bot."""
    if not update.effective_chat: return
    await update.effective_chat.send_message("¬°Hola! Soy tu bot cin√©filo. Usa /help para ver mis funciones.")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Muestra la ayuda."""
    if not update.effective_chat: return
    help_text = """
    üé• **Comandos Cin√©filos:**
    /cinematrivia - Inicia una trivia de pel√≠culas.
    /adivinapelicula - Juega a adivinar la pel√≠cula (en desarrollo).
    /emojipelicula - Juega a adivinar la pel√≠cula con emojis (en desarrollo).

    ü§ñ **Comandos B√°sicos:**
    /id - Muestra tu ID de usuario y el ID del chat.
    /saludar - El bot te saluda.
    /rules - Muestra las reglas del grupo.
    /echo [mensaje] - El bot repite tu mensaje.
    /about - Informaci√≥n sobre el bot.
    /info - Informaci√≥n general.
    /contacto - Contacto del desarrollador.
    /links - Enlaces √∫tiles.
    /github - Enlace al repositorio de GitHub.
    /version - Muestra la versi√≥n del bot.

    üí∞ **Apoyo:**
    /donate - Informaci√≥n para donar.

    ‚ú® **Utilidades (solo admins):**
    /crypto [moneda] - Precio de criptomonedas (ej. /crypto BTC).
    /weather [ciudad] - Clima de una ciudad (ej. /weather Madrid).
    /exchange [USD EUR] - Tasa de cambio (ej. /exchange USD EUR).
    /youtube [URL] - Informaci√≥n de video de YouTube.
    /joke - Un chiste aleatorio.
    /fact - Un dato curioso aleatorio.
    /status - Estado del bot.
    /ping - Comprueba la latencia.
    /config - Configuraci√≥n del bot.
    /stats - Estad√≠sticas de uso.
    /broadcast_message [mensaje] - Env√≠a un mensaje a todos los chats.

    üîí **Comandos de Autorizaci√≥n:**
    /solicitarautorizacion - Solicita autorizaci√≥n para tu chat.
    /aprobar_grupo [chat_id] - Aprueba un grupo (solo admins).
    /ver_solicitudes - Ve solicitudes pendientes (solo admins).
    /status_auth - Ver estado de autorizaci√≥n del chat.

    ¬°Disfruta del cine con Puntum Bot! üçø
    """
    await update.effective_chat.send_message(help_text, parse_mode="Markdown")

# --- Funciones de Comandos de Juegos ---
async def cmd_cinematrivia(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Inicia una nueva trivia de pel√≠culas."""
    if not update.effective_chat:
        return

    chat_id = update.effective_chat.id

    if 'active_trivia_answer' in context.chat_data:
        await update.effective_chat.send_message(
            "Ya hay una trivia de pel√≠culas activa en este chat. ¬°Responde la pregunta actual!"
        )
        return

    try:
        pregunta, respuesta_correcta = generar_pregunta()
        if respuesta_correcta == "Error":
             await update.effective_chat.send_message(pregunta)
             return

        context.chat_data['active_trivia_question'] = pregunta
        context.chat_data['active_trivia_answer'] = respuesta_correcta.lower().strip()

        await update.effective_chat.send_message(f"üé¨ ¬°Nueva Trivia de Cine!\n\n{pregunta}")
        await update.effective_chat.send_message("Responde directamente a este mensaje para adivinar.")

    except Exception as e:
        logger.error(f"Error al iniciar trivia de pel√≠culas: {e}")
        await update.effective_chat.send_message("Lo siento, no pude generar una pregunta de trivia en este momento. Por favor, intenta de nuevo m√°s tarde.")


# --- Manejadores de Mensajes Generales ---
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja todos los mensajes de texto para registrar actividad y otras l√≥gicas."""
    if update.effective_user and update.effective_chat and update.message and update.message.text:
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        username = update.effective_user.username or update.effective_user.first_name
        chat_type = update.effective_chat.type

        await add_user(user_id, username)
        await add_chat(chat_id, update.effective_chat.title or "Private Chat", chat_type)
        await record_message(user_id, chat_id, update.message.text)
        await update_user_activity(user_id)
        await update_chat_activity(chat_id)

        if 'active_trivia_answer' in context.chat_data:
            user_response = update.message.text.lower().strip()
            expected_answer = context.chat_data['active_trivia_answer']

            if user_response == expected_answer:
                await update.effective_chat.send_message(
                    f"üéâ ¬°Correcto, {update.effective_user.first_name}! La respuesta era '{expected_answer.title()}'."
                )
                del context.chat_data['active_trivia_question']
                del context.chat_data['active_trivia_answer']
                return
    await handle_game_message(update, context)


# --- Inicializaci√≥n y Ejecuci√≥n del Bot ---
async def post_init(application):
    """Configurar comandos y tareas despu√©s de inicializar la aplicaci√≥n"""
    commands = [
        # Comandos b√°sicos
        BotCommand("start", "Inicia el bot"),
        BotCommand("help", "Muestra la ayuda"),
        BotCommand("id", "Muestra tu ID de usuario y chat"),
        BotCommand("echo", "Repite tu mensaje"),
        BotCommand("saludar", "El bot te saluda"),
        BotCommand("rules", "Muestra las reglas del grupo"),
        BotCommand("about", "Informaci√≥n sobre el bot"),
        BotCommand("info", "Muestra informaci√≥n √∫til"),
        BotCommand("contacto", "Informaci√≥n de contacto"),
        BotCommand("links", "Enlaces √∫tiles"),
        BotCommand("donate", "Informaci√≥n para donaciones"),
        BotCommand("github", "Enlace al repositorio de GitHub"),
        BotCommand("version", "Muestra la versi√≥n del bot"),
        # Comandos de utilidad (asumiendo que los de 'utils' los manejas directamente en bot.py)
        BotCommand("meme", "Obt√©n un meme aleatorio"),
        BotCommand("crypto", "Obt√©n el precio de una criptomoneda"),
        BotCommand("weather", "Obt√©n el clima de una ciudad"),
        BotCommand("exchange", "Obt√©n tasa de cambio"),
        BotCommand("youtube", "Obt√©n info de video de YouTube"),
        BotCommand("joke", "Obt√©n un chiste aleatorio"),
        BotCommand("fact", "Obt√©n un dato curioso aleatorio"),
        # Comandos de juegos
        BotCommand("cinematrivia", "Inicia una trivia de pel√≠culas"),
        BotCommand("adivinapelicula", "Inicia el juego Adivina la Pel√≠cula"),
        BotCommand("emojipelicula", "Inicia el juego Emoji Pel√≠cula"),
        # Comandos de autorizaci√≥n (si los quieres mantener, si no, elim√≠nalos)
        BotCommand("solicitarautorizacion", "Solicita autorizaci√≥n para el grupo"),
        BotCommand("aprobar_grupo", "Aprobar solicitud de grupo (solo admins)"),
        BotCommand("ver_solicitudes", "Ver solicitudes pendientes (solo admins)"),
        BotCommand("status_auth", "Ver estado de autorizaci√≥n del chat."),
        # Estos comandos (status, ping, config, stats, broadcast_message) no est√°n en comandos_basicos.py
        # Si existen como funciones, deben definirse o importarse.
        # Asumo que pueden ser administrativos y usen auth_required.
        BotCommand("status", "Estado actual del bot (solo admins)"),
        BotCommand("ping", "Comprueba la latencia del bot (solo admins)"),
        BotCommand("config", "Configura el bot (solo admins)"),
        BotCommand("stats", "Estad√≠sticas del bot (solo admins)"),
        BotCommand("broadcast_message", "Env√≠a un mensaje a todos los chats (solo admins)"),
    ]
    await application.bot.set_my_commands(commands)
    logger.info("Comandos del bot establecidos.")

    await initialize_db()
    logger.info("Base de datos inicializada.")

    # YA NO SE LLAMA A setup_admin_list() AQUI porque no existe en sistema_autorizacion.py
    # Y ADMIN_USER_ID es hardcodeado all√≠.

    # Tambi√©n llama a create_auth_tables para la DB de autorizaci√≥n
    await create_auth_tables()
    logger.info("Tablas de autorizaci√≥n inicializadas.")


async def main():
    load_env()

    TOKEN = os.environ.get('TOKEN')
    if not TOKEN:
        logger.error("No se encontr√≥ el TOKEN del bot en las variables de entorno.")
        return

    application = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

    # Comandos b√°sicos (algunos con autenticaci√≥n)
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(CommandHandler("id", auth_required(cmd_id)))
    application.add_handler(CommandHandler("echo", auth_required(cmd_echo)))
    application.add_handler(CommandHandler("saludar", cmd_saludar))
    application.add_handler(CommandHandler("rules", cmd_rules))
    application.add_handler(CommandHandler("about", cmd_about))
    application.add_handler(CommandHandler("info", cmd_info))
    application.add_handler(CommandHandler("contacto", cmd_contacto))
    application.add_handler(CommandHandler("links", cmd_links))
    application.add_handler(CommandHandler("donate", cmd_donate))
    application.add_handler(CommandHandler("github", cmd_github))
    application.add_handler(CommandHandler("version", cmd_version))

    # Comandos de utilidad (generalmente auth_required)
    # Estas funciones deben definirse o importarse de 'utils.py'
    # y si son comandos, deben tener su propia funci√≥n as√≠ncrona.
    # Los ejemplos aqu√≠ asumen que las funciones de 'utils.py' son directamente comandos.
    application.add_handler(CommandHandler("meme", auth_required(get_random_meme_url)))
    application.add_handler(CommandHandler("crypto", auth_required(get_crypto_price)))
    application.add_handler(CommandHandler("weather", auth_required(fetch_weather)))
    application.add_handler(CommandHandler("exchange", auth_required(get_exchange_rate)))
    application.add_handler(CommandHandler("youtube", auth_required(get_youtube_video_info)))
    application.add_handler(CommandHandler("joke", auth_required(get_joke)))
    application.add_handler(CommandHandler("fact", auth_required(get_random_fact)))

    # Comandos de juegos
    application.add_handler(CommandHandler("cinematrivia", auth_required(cmd_cinematrivia)))
    application.add_handler(CommandHandler("adivinapelicula", auth_required(cmd_adivinapelicula)))
    application.add_handler(CommandHandler("emojipelicula", auth_required(cmd_emojipelicula)))

    # Comandos de autorizaci√≥n (si los quieres mantener, si no, elim√≠nalos junto con sus importaciones)
    application.add_handler(CommandHandler("solicitarautorizacion", cmd_solicitar_autorizacion)) # Este no suele ser auth_required
    application.add_handler(CommandHandler("aprobar_grupo", auth_required(cmd_aprobar_grupo)))
    application.add_handler(CommandHandler("ver_solicitudes", auth_required(cmd_ver_solicitudes)))
    application.add_handler(CommandHandler("status_auth", auth_required(cmd_status_auth)))


    # Otros comandos administrativos que no est√°n en comandos_basicos.py
    # Deben existir como funciones o importarse de otro m√≥dulo.
    # Aqu√≠ los dejo con auth_required asumiendo que son admin.
    # Si no tienes estas funciones, tendr√≠as que definirlas o eliminarlas.
    # Por ejemplo, si tienes un cmd_status en db.py o utils.py:
    # from db import cmd_status (ejemplo)
    async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.effective_chat.send_message("Bot est√° activo y funcionando.")

    async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.effective_chat.send_message("Pong!")

    async def cmd_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.effective_chat.send_message("Comando de configuraci√≥n (en desarrollo).")

    async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.effective_chat.send_message("Comando de estad√≠sticas (en desarrollo).")

    async def cmd_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.effective_chat.send_message("Comando de broadcast (en desarrollo).")


    application.add_handler(CommandHandler("status", auth_required(cmd_status)))
    application.add_handler(CommandHandler("ping", auth_required(cmd_ping)))
    application.add_handler(CommandHandler("config", auth_required(cmd_config)))
    application.add_handler(CommandHandler("stats", auth_required(cmd_stats)))
    application.add_handler(CommandHandler("broadcast_message", auth_required(cmd_broadcast_message)))


    # Manejadores de callbacks
    application.add_handler(CallbackQueryHandler(handle_trivia_callback))

    # Manejador de mensajes de texto (NO COMANDOS)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))


    logger.info("Bot iniciado. Presiona Ctrl+C para detener.")
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())

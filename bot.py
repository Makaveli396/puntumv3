# bot.py
import os
import logging
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)

# Importaciones de tus m√≥dulos locales
from sistema_autorizacion import (
    create_auth_tables, is_chat_authorized, authorize_chat,
    auth_required, cmd_solicitar_autorizacion, cmd_aprobar_grupo, cmd_ver_solicitudes,
    cmd_status_auth # Aseg√∫rate de que cmd_status_auth tambi√©n est√© si lo usas
)
from comandos_basicos import (
    cmd_start, cmd_help, cmd_id, cmd_saludar, cmd_rules,
    cmd_about, cmd_info, cmd_contacto, cmd_links, cmd_donate,
    cmd_github, cmd_version, cmd_status, cmd_ping,
    cmd_config, cmd_stats, cmd_broadcast_message
)
from db import (
    initialize_db, add_user, get_user_by_telegram_id, 
    add_chat, get_chat_by_telegram_id, record_message, 
    get_top_users, get_top_chats, get_bot_stats, 
    update_user_activity, update_chat_activity
)
from utils import (
    load_env, get_random_meme_url,
    get_crypto_price, fetch_weather, get_exchange_rate,
    get_youtube_video_info, get_joke, get_random_fact
)
from juegos import (
    cmd_adivinapelicula, cmd_emojipelicula, handle_game_message, # Mant√©n estos si los usas
    handle_trivia_callback # Si lo usas para la trivia
)

# IMPORTANTE: Importar generar_pregunta directamente desde generador_trivia.py
# porque est√° en la misma carpeta.
from generador_trivia import generar_pregunta 

# Configuraci√≥n de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Diccionario para almacenar el estado de la trivia por chat
# Reemplazamos 'active_trivias' por datos en context.chat_data para una mejor gesti√≥n de estado por chat.
# Se eliminar√° la variable global active_trivias para usar solo context.chat_data


# --- Comandos Administrativos (auth_required) ---
# ... (Mant√©n tus comandos administrativos aqu√≠) ...

# --- Comandos de Usuario ---
# ... (Mant√©n tus comandos de usuario aqu√≠) ...

# --- Funciones de Comandos de Juegos ---
# Modificamos cmd_cinematrivia para usar generar_pregunta
async def cmd_cinematrivia(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Inicia una nueva trivia de pel√≠culas."""
    if not update.effective_chat:
        return

    chat_id = update.effective_chat.id

    # Comprobar si ya hay una trivia activa en este chat
    if 'active_trivia_answer' in context.chat_data:
        await update.effective_chat.send_message(
            "Ya hay una trivia de pel√≠culas activa en este chat. ¬°Responde la pregunta actual!"
        )
        return

    try:
        pregunta, respuesta_correcta = generar_pregunta()
        if respuesta_correcta == "Error": # Manejo de errores de generar_pregunta
             await update.effective_chat.send_message(pregunta)
             return

        # Almacenar la pregunta y respuesta en context.chat_data para este chat
        context.chat_data['active_trivia_question'] = pregunta
        context.chat_data['active_trivia_answer'] = respuesta_correcta.lower().strip()
        
        await update.effective_chat.send_message(f"üé¨ ¬°Nueva Trivia de Cine!\n\n{pregunta}")
        await update.effective_chat.send_message("Responde directamente a este mensaje para adivinar.")

    except Exception as e:
        logger.error(f"Error al iniciar trivia de pel√≠culas: {e}")
        await update.effective_chat.send_message("Lo siento, no pude generar una pregunta de trivia en este momento. Por favor, intenta de nuevo m√°s tarde.")


# --- Manejadores de Mensajes Generales ---
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Maneja todos los mensajes de texto para registrar actividad y otras l√≥gicas."""
    if update.effective_user and update.effective_chat and update.message and update.message.text:
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        username = update.effective_user.username or update.effective_user.first_name
        chat_type = update.effective_chat.type
        
        await add_user(user_id, username)
        await add_chat(chat_id, update.effective_chat.title or "Private Chat", chat_type)
        await record_message(user_id, chat_id, update.message.text)
        await update_user_activity(user_id)
        await update_chat_activity(chat_id)

        # L√≥gica para manejar respuestas de trivia (AHORA VA AQU√ç)
        # Se verifica si hay una trivia activa en este chat
        if 'active_trivia_answer' in context.chat_data:
            user_response = update.message.text.lower().strip()
            expected_answer = context.chat_data['active_trivia_answer']

            if user_response == expected_answer:
                await update.effective_chat.send_message(
                    f"üéâ ¬°Correcto, {update.effective_user.first_name}! La respuesta era '{expected_answer.title()}'."
                )
                # Opcional: a√±adir puntos al usuario
                # await add_points(user_id, 10) 
                
                # Eliminar la trivia activa del chat_data
                del context.chat_data['active_trivia_question']
                del context.chat_data['active_trivia_answer']
                return # Importante: el mensaje ha sido manejado por la trivia
            # Si la respuesta es incorrecta, el bot no dice nada para no "spammear".
            # Puedes a√±adir un mensaje de "incorrecto, intenta de nuevo" si lo deseas.
            # else:
            #     await update.effective_chat.send_message(
            #         f"‚ùå Incorrecto, {update.effective_user.first_name}. ¬°Sigue intentando!"
            #     )
            # return # Si quieres que el mensaje de respuesta de trivia no sea procesado por otros manejadores


    # Si el mensaje no fue una respuesta de trivia, o no era texto, o era un comando,
    # entonces puede ser procesado por otros manejadores.
    # Por ejemplo, si tienes un handle_game_message general en juegos.py,
    # este se llamar√≠a despu√©s de que la l√≥gica de trivia haya fallado en reconocer el mensaje.
    # Si quieres que handle_game_message maneje tambi√©n otras respuestas de juegos (adivina, emoji),
    # aseg√∫rate de que su l√≥gica no interfiera con la de la trivia o viceversa.
    await handle_game_message(update, context) # Llama a tu manejador general de mensajes de juegos


# --- Inicializaci√≥n y Ejecuci√≥n del Bot ---
async def post_init(application):
    """Configurar comandos y tareas despu√©s de inicializar la aplicaci√≥n"""
    commands = [
        # Comandos b√°sicos
        BotCommand("start", "Inicia el bot"),
        BotCommand("help", "Muestra la ayuda"),
        BotCommand("id", "Muestra tu ID de usuario y chat"),
        BotCommand("echo", "Repite tu mensaje"),
        BotCommand("saludar", "El bot te saluda"),
        BotCommand("rules", "Muestra las reglas del grupo"),
        BotCommand("about", "Informaci√≥n sobre el bot"),
        BotCommand("info", "Muestra informaci√≥n √∫til"),
        BotCommand("contacto", "Informaci√≥n de contacto"),
        BotCommand("links", "Enlaces √∫tiles"),
        BotCommand("donate", "Informaci√≥n para donaciones"),
        BotCommand("github", "Enlace al repositorio de GitHub"),
        BotCommand("version", "Muestra la versi√≥n del bot"),
        BotCommand("status", "Estado actual del bot"),
        BotCommand("ping", "Comprueba la latencia del bot"),
        BotCommand("config", "Configura el bot (solo admins)"),
        BotCommand("stats", "Estad√≠sticas del bot"),
        BotCommand("broadcast_message", "Env√≠a un mensaje a todos los chats (solo admins)"),
        # Comandos de utilidad
        BotCommand("meme", "Obt√©n un meme aleatorio"),
        BotCommand("crypto", "Obt√©n el precio de una criptomoneda (ej. /crypto BTC)"),
        BotCommand("weather", "Obt√©n el clima de una ciudad (ej. /weather Madrid)"),
        BotCommand("exchange", "Obt√©n tasa de cambio (ej. /exchange USD EUR)"),
        BotCommand("youtube", "Obt√©n info de video de YouTube (ej. /youtube <URL>)"),
        BotCommand("joke", "Obt√©n un chiste aleatorio"),
        BotCommand("fact", "Obt√©n un dato curioso aleatorio"),
        # Comandos de juegos
        BotCommand("cinematrivia", "Inicia una trivia de pel√≠culas"), # A√ëADIDO
        BotCommand("adivinapelicula", "Inicia el juego Adivina la Pel√≠cula"),
        BotCommand("emojipelicula", "Inicia el juego Emoji Pel√≠cula"),
    ]
    await application.bot.set_my_commands(commands)
    logger.info("Comandos del bot establecidos.")
    
    # Inicializar la base de datos
    await initialize_db()
    logger.info("Base de datos inicializada.")

    # Cargar lista de administradores
    await setup_admin_list()
    logger.info("Lista de administradores cargada.")

async def main():
    load_env() # Cargar variables de entorno

    TOKEN = os.environ.get('TOKEN')
    if not TOKEN:
        logger.error("No se encontr√≥ el TOKEN del bot en las variables de entorno.")
        return

    application = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

    # --- Registra tus handlers aqu√≠ ---

    # Comandos b√°sicos (algunos con autenticaci√≥n)
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(CommandHandler("id", auth_required(cmd_id)))
    application.add_handler(CommandHandler("saludar", cmd_saludar))
    application.add_handler(CommandHandler("rules", cmd_rules))
    application.add_handler(CommandHandler("about", cmd_about))
    application.add_handler(CommandHandler("info", cmd_info))
    application.add_handler(CommandHandler("contacto", cmd_contacto))
    application.add_handler(CommandHandler("links", cmd_links))
    application.add_handler(CommandHandler("donate", cmd_donate))
    application.add_handler(CommandHandler("github", cmd_github))
    application.add_handler(CommandHandler("version", cmd_version))
    application.add_handler(CommandHandler("status", auth_required(cmd_status)))
    application.add_handler(CommandHandler("ping", auth_required(cmd_ping)))
    application.add_handler(CommandHandler("config", auth_required(cmd_config)))
    application.add_handler(CommandHandler("stats", auth_required(cmd_stats)))
    application.add_handler(CommandHandler("broadcast_message", auth_required(cmd_broadcast_message)))
    
    # Comandos de utilidad
    application.add_handler(CommandHandler("meme", auth_required(get_random_meme_url)))
    application.add_handler(CommandHandler("crypto", auth_required(get_crypto_price)))
    application.add_handler(CommandHandler("weather", auth_required(fetch_weather)))
    application.add_handler(CommandHandler("exchange", auth_required(get_exchange_rate)))
    application.add_handler(CommandHandler("youtube", auth_required(get_youtube_video_info)))
    application.add_handler(CommandHandler("joke", auth_required(get_joke)))
    application.add_handler(CommandHandler("fact", auth_required(get_random_fact)))

    # Comandos de juegos
    application.add_handler(CommandHandler("cinematrivia", auth_required(cmd_cinematrivia))) # Usa la nueva funci√≥n
    application.add_handler(CommandHandler("adivinapelicula", auth_required(cmd_adivinapelicula)))
    application.add_handler(CommandHandler("emojipelicula", auth_required(cmd_emojipelicula)))

    # Manejadores de callbacks
    application.add_handler(CallbackQueryHandler(handle_trivia_callback)) # Si usas botones para trivia

    # Manejador de mensajes de texto (NO COMANDOS)
    # Este manejador debe ir al final o su l√≥gica debe ser muy cuidadosa
    # para no interferir con otros handlers (ej. trivia).
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))


    logger.info("Bot iniciado. Presiona Ctrl+C para detener.")
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
